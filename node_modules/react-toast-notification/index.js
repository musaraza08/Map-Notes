import './dist/assets/style.css';
import isEmpty from './utils/isEmpty';

let defaultDelay = '5000';

let showToast = (delayTime, autoHide, toastType) => {
  if (document.querySelector('.toast-notify')) {
    document.querySelector('.toast-notify').style.opacity = '1';
  }

  decideClassName(toastType)
  
  if(autoHide === true || isEmpty(autoHide)){
    setTimeout(() => {
      hideToast()
    }, delayTime ? delayTime : defaultDelay);
  }

  document.getElementById ("closeButtonNotify").addEventListener ("click", () => hideToast());
}

const hideToast = () => {
  document.querySelector('.toast-notify').style.display = 'none';
  document.querySelector('.toast-notify').style.opacity = '0';
  document.getElementById('show-notification').remove();
}

const decideClassName = toastType => {
  let element = document.getElementById("mainToast");

  if(toastType === 'success'){
    element.classList.add("success");  
  } else if(toastType === 'error'){
    element.classList.add("error");
  } else if(toastType === 'warn'){
    element.classList.add("warn");
  } else if(toastType === 'info'){
    element.classList.add("info");
  } else if(toastType === 'default' || isEmpty(toastType)){
    element.classList.add("default");
  }
}

export const toast = (message, config) => {
  let element = document.createElement('div');
  element.id = "show-notification";
  document.body.appendChild(element);

  if(document.getElementById('show-notification')) {
    document.getElementById('show-notification').innerHTML = `<div>
      <div id="mainToast" class="toast-bg-color">
      <div class="toast-notify">
      <div class="toast-header-notify"><strong>${config.status ? config.status : '&nbsp;' }</strong>
      <button type="button" class=${config.type} id="closeButtonNotify">
      <span>Ã—</span></button></div><div class="toast-body-notify">${message}</div>
      </div></div>`;
  }
  showToast(config.delay, config.autoHide, config.type);
}

//Shortcuts for all four cases
export const success = (message, config) => {
  if (message) {
    toast(message, {
      type: 'success',
      status: config && config.status ? config.status : 'Success!',
      delay: config && config.delay,
      autoHide: config && config.autoHide
    });
  }
}

export const error = (message, config) => {
  if (message) {
    toast(message, {
      type: 'error',
      status: config && config.status ? config.status : 'Oops!',
      delay: config && config.delay,
      autoHide: config && config.autoHide
    });
  }
}

export const warn = (message, config) => {
  if (message) {
    toast(message, {
      type: 'warn',
      status: config && config.status ? config.status : 'Warning!',
      delay: config && config.delay,
      autoHide: config && config.autoHide
    });
  }
}

export const info = (message, config) => {
  if (message) {
    toast(message, {
      type: 'info',
      status: config && config.status ? config.status : 'Information!',
      delay: config && config.delay,
      autoHide: config && config.autoHide
    });
  }
}

export default { success, error, warn, info };